const asciiTable = [
    ['NUL'],
    ['SOH'],
    ['STX'],
    ['ETX'],
    ['EOT'],
    ['ENQ'],
    ['ACK'],
    ['BEL'],
    ['BS'],
    ['HT'],
    ['LF'],
    ['VT'],
    ['FF'],
    ['CR'],
    ['SO'],
    ['SI'],
    ['DLE'],
    ['DC1'],
    ['DC2'],
    ['DC3'],
    ['DC4'],
    ['NAK'],
    ['SYN'],
    ['ETB'],
    ['CAN'],
    ['EM'],
    ['SUB'],
    ['ESC'],
    ['FS'],
    ['GS'],
    ['RS'],
    ['US'],
    ['SPACE'],
    ['!'],
    ['"'],
    ['#'],
    ['$'],
    ['%'],
    ['&'],
    ["'"],
    ['('],
    [')'],
    ['*'],
    ['+'],
    [','],
    ['-'],
    ['.'],
    ['/'],
    ['0'],
    ['1'],
    ['2'],
    ['3'],
    ['4'],
    ['5'],
    ['6'],
    ['7'],
    ['8'],
    ['9'],
    [':'],
    [';'],
    ['<'],
    ['='],
    ['>'],
    ['?'],
    ['@'],
    ['A'],
    ['B'],
    ['C'],
    ['D'],
    ['E'],
    ['F'],
    ['G'],
    ['H'],
    ['I'],
    ['J'],
    ['K'],
    ['L'],
    ['M'],
    ['N'],
    ['O'],
    ['P'],
    ['Q'],
    ['R'],
    ['S'],
    ['T'],
    ['U'],
    ['V'],
    ['W'],
    ['X'],
    ['Y'],
    ['Z'],
    ['['],
    ['\\'],
    [']'],
    ['^'],
    ['_'],
    ['`'],
    ['a'],
    ['b'],
    ['c'],
    ['d'],
    ['e'],
    ['f'],
    ['g'],
    ['h'],
    ['i'],
    ['j'],
    ['k'],
    ['l'],
    ['m'],
    ['n'],
    ['o'],
    ['p'],
    ['q'],
    ['r'],
    ['s'],
    ['t'],
    ['u'],
    ['v'],
    ['w'],
    ['x'],
    ['y'],
    ['z'],
    ['{'],
    ['|'],
    ['}'],
    ['~'],
    ['DEL'],
] as const;

const controlCharsRange = { low: 0, high: 31 };
const spaceCharIndex = 32;
const delCharIndex = 127;

export function getChar(code: number): string | undefined {
    const entry = asciiTable[code];
    if (!entry) return undefined;

    return entry[0];
}

export function getCode(char: string): number | undefined {
    const index = asciiTable.findIndex((entry, idx) => {
        if (
            (idx >= controlCharsRange.low && idx <= controlCharsRange.high) ||
            idx === spaceCharIndex ||
            idx === delCharIndex
        ) {
            return entry[0] === char.toUpperCase();
        } else {
            return entry[0] === char;
        }
    });
    if (index === -1) return undefined;

    return index;
}
